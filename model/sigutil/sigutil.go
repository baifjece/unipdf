//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sigutil

import (
	_c "bytes"
	_e "crypto"
	_fb "crypto/x509"
	_ad "encoding/asn1"
	_fe "encoding/pem"
	_ec "errors"
	_a "fmt"
	_bc "github.com/unidoc/timestamp"
	_ba "github.com/unidoc/unipdf/v3/common"
	_ea "golang.org/x/crypto/ocsp"
	_eg "io"
	_f "net/http"
	_b "time"
)

// Get retrieves the certificate at the specified URL.
func (_fd *CertClient) Get(url string) (*_fb.Certificate, error) {
	if _fd.HTTPClient == nil {
		_fd.HTTPClient = _cdg()
	}
	_cc, _be := _fd.HTTPClient.Get(url)
	if _be != nil {
		return nil, _be
	}
	defer _cc.Body.Close()
	_dd, _be := _eg.ReadAll(_cc.Body)
	if _be != nil {
		return nil, _be
	}
	if _bg, _ := _fe.Decode(_dd); _bg != nil {
		_dd = _bg.Bytes
	}
	_ff, _be := _fb.ParseCertificate(_dd)
	if _be != nil {
		return nil, _be
	}
	return _ff, nil
}

// NewCertClient returns a new certificate client.
func NewCertClient() *CertClient { return &CertClient{HTTPClient: _cdg()} }

// GetIssuer retrieves the issuer of the provided certificate.
func (_eb *CertClient) GetIssuer(cert *_fb.Certificate) (*_fb.Certificate, error) {
	return nil, nil
	for _, _dg := range cert.IssuingCertificateURL {
		_ccg, _cd := _eb.Get(_dg)
		if _cd != nil {
			_ba.Log.Debug("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074 \u0064\u006f\u0077\u006e\u006c\u006f\u0061\u0064\u0020\u0069\u0073\u0073\u0075e\u0072\u0020\u0066\u006f\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066ic\u0061\u0074\u0065\u0020\u0025\u0076\u003a\u0020\u0025\u0076", cert.Subject.CommonName, _cd)
			continue
		}
		return _ccg, nil
	}
	return nil, _a.Errorf("\u0069\u0073\u0073\u0075e\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063a\u0074e\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064")
}

// NewCRLClient returns a new CRL client.
func NewCRLClient() *CRLClient { return &CRLClient{HTTPClient: _cdg()} }

// MakeRequest makes a CRL request to the specified server and returns the
// response. If a server URL is not provided, it is extracted from the certificate.
func (_ae *CRLClient) MakeRequest(serverURL string, cert *_fb.Certificate) ([]byte, error) {
	if _ae.HTTPClient == nil {
		_ae.HTTPClient = _cdg()
	}
	if serverURL == "" {
		if len(cert.CRLDistributionPoints) == 0 {
			return nil, _ec.New("\u0063e\u0072\u0074i\u0066\u0069\u0063\u0061t\u0065\u0020\u0064o\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0070ec\u0069\u0066\u0079 \u0061\u006ey\u0020\u0043\u0052\u004c\u0020\u0073e\u0072\u0076e\u0072\u0073")
		}
		serverURL = cert.CRLDistributionPoints[0]
	}
	_fdf, _cb := _ae.HTTPClient.Get(serverURL)
	if _cb != nil {
		return nil, _cb
	}
	defer _fdf.Body.Close()
	_da, _cb := _eg.ReadAll(_fdf.Body)
	if _cb != nil {
		return nil, _cb
	}
	if _g, _ := _fe.Decode(_da); _g != nil {
		_da = _g.Bytes
	}
	return _da, nil
}

// CertClient represents a X.509 certificate client. Its primary purpose
// is to download certificates.
type CertClient struct {

	// HTTPClient is the HTTP client used to make certificate requests.
	// By default, an HTTP client with a 5 second timeout per request is used.
	HTTPClient *_f.Client
}

// TimestampClient represents a RFC 3161 timestamp client.
// It is used to obtain signed tokens from timestamp authority servers.
type TimestampClient struct {

	// HTTPClient is the HTTP client used to make timestamp requests.
	// By default, an HTTP client with a 5 second timeout per request is used.
	HTTPClient *_f.Client

	// Callbacks.
	BeforeHTTPRequest func(_ef *_f.Request) error
}

// NewTimestampRequest returns a new timestamp request based
// on the specified options.
func NewTimestampRequest(body _eg.Reader, opts *_bc.RequestOptions) (*_bc.Request, error) {
	if opts == nil {
		opts = &_bc.RequestOptions{}
	}
	if opts.Hash == 0 {
		opts.Hash = _e.SHA256
	}
	if !opts.Hash.Available() {
		return nil, _fb.ErrUnsupportedAlgorithm
	}
	_ebb := opts.Hash.New()
	if _, _fa := _eg.Copy(_ebb, body); _fa != nil {
		return nil, _fa
	}
	return &_bc.Request{HashAlgorithm: opts.Hash, HashedMessage: _ebb.Sum(nil), Certificates: opts.Certificates, TSAPolicyOID: opts.TSAPolicyOID, Nonce: opts.Nonce}, nil
}

// NewTimestampClient returns a new timestamp client.
func NewTimestampClient() *TimestampClient { return &TimestampClient{HTTPClient: _cdg()} }

// MakeRequest makes a OCSP request to the specified server and returns
// the parsed and raw responses. If a server URL is not provided, it is
// extracted from the certificate.
func (_aea *OCSPClient) MakeRequest(serverURL string, cert, issuer *_fb.Certificate) (*_ea.Response, []byte, error) {
	if _aea.HTTPClient == nil {
		_aea.HTTPClient = _cdg()
	}
	if serverURL == "" {
		if len(cert.OCSPServer) == 0 {
			return nil, nil, _ec.New("\u0063e\u0072\u0074i\u0066\u0069\u0063a\u0074\u0065\u0020\u0064\u006f\u0065\u0073 \u006e\u006f\u0074\u0020\u0073\u0070e\u0063\u0069\u0066\u0079\u0020\u0061\u006e\u0079\u0020\u004f\u0043S\u0050\u0020\u0073\u0065\u0072\u0076\u0065\u0072\u0073")
		}
		serverURL = cert.OCSPServer[0]
	}
	_dge, _ca := _ea.CreateRequest(cert, issuer, &_ea.RequestOptions{Hash: _aea.Hash})
	if _ca != nil {
		return nil, nil, _ca
	}
	_bb, _ca := _aea.HTTPClient.Post(serverURL, "\u0061p\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u006fc\u0073\u0070\u002d\u0072\u0065\u0071\u0075\u0065\u0073\u0074", _c.NewReader(_dge))
	if _ca != nil {
		return nil, nil, _ca
	}
	defer _bb.Body.Close()
	_ge, _ca := _eg.ReadAll(_bb.Body)
	if _ca != nil {
		return nil, nil, _ca
	}
	if _bad, _ := _fe.Decode(_ge); _bad != nil {
		_ge = _bad.Bytes
	}
	_gd, _ca := _ea.ParseResponseForCert(_ge, cert, issuer)
	if _ca != nil {
		return nil, nil, _ca
	}
	return _gd, _ge, nil
}

// CRLClient represents a CRL (Certificate revocation list) client.
// It is used to request revocation data from CRL servers.
type CRLClient struct {

	// HTTPClient is the HTTP client used to make CRL requests.
	// By default, an HTTP client with a 5 second timeout per request is used.
	HTTPClient *_f.Client
}

// NewOCSPClient returns a new OCSP client.
func NewOCSPClient() *OCSPClient { return &OCSPClient{HTTPClient: _cdg(), Hash: _e.SHA1} }

// IsCA returns true if the provided certificate appears to be a CA certificate.
func (_dgd *CertClient) IsCA(cert *_fb.Certificate) bool {
	return cert.IsCA && _c.Equal(cert.RawIssuer, cert.RawSubject)
}

// GetEncodedToken executes the timestamp request and returns the DER encoded
// timestamp token bytes.
func (_fae *TimestampClient) GetEncodedToken(serverURL string, req *_bc.Request) ([]byte, error) {
	if serverURL == "" {
		return nil, _a.Errorf("\u006d\u0075\u0073\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0020\u0074\u0069\u006d\u0065\u0073\u0074\u0061m\u0070\u0020\u0073\u0065\u0072\u0076\u0065r\u0020\u0055\u0052\u004c")
	}
	if req == nil {
		return nil, _a.Errorf("\u0074\u0069\u006de\u0073\u0074\u0061\u006dp\u0020\u0072\u0065\u0071\u0075\u0065\u0073t\u0020\u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0069\u006c")
	}
	_db, _ffg := req.Marshal()
	if _ffg != nil {
		return nil, _ffg
	}
	_cab, _ffg := _f.NewRequest("\u0050\u004f\u0053\u0054", serverURL, _c.NewBuffer(_db))
	if _ffg != nil {
		return nil, _ffg
	}
	_cab.Header.Set("\u0043\u006f\u006et\u0065\u006e\u0074\u002d\u0054\u0079\u0070\u0065", "a\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0074\u0069\u006d\u0065\u0073t\u0061\u006d\u0070-\u0071u\u0065\u0072\u0079")
	if _fae.BeforeHTTPRequest != nil {
		if _fdb := _fae.BeforeHTTPRequest(_cab); _fdb != nil {
			return nil, _fdb
		}
	}
	_fg := _fae.HTTPClient
	if _fg == nil {
		_fg = _cdg()
	}
	_df, _ffg := _fg.Do(_cab)
	if _ffg != nil {
		return nil, _ffg
	}
	defer _df.Body.Close()
	_ed, _ffg := _eg.ReadAll(_df.Body)
	if _ffg != nil {
		return nil, _ffg
	}
	if _df.StatusCode != _f.StatusOK {
		return nil, _a.Errorf("\u0075\u006e\u0065x\u0070\u0065\u0063\u0074e\u0064\u0020\u0048\u0054\u0054\u0050\u0020s\u0074\u0061\u0074\u0075\u0073\u0020\u0063\u006f\u0064\u0065\u003a\u0020\u0025\u0064", _df.StatusCode)
	}
	var _fee struct {
		Version _ad.RawValue
		Content _ad.RawValue
	}
	if _, _ffg = _ad.Unmarshal(_ed, &_fee); _ffg != nil {
		return nil, _ffg
	}
	return _fee.Content.FullBytes, nil
}

func _cdg() *_f.Client { return &_f.Client{Timeout: 5 * _b.Second} }

// OCSPClient represents a OCSP (Online Certificate Status Protocol) client.
// It is used to request revocation data from OCSP servers.
type OCSPClient struct {

	// HTTPClient is the HTTP client used to make OCSP requests.
	// By default, an HTTP client with a 5 second timeout per request is used.
	HTTPClient *_f.Client

	// Hash is the hash function  used when constructing the OCSP
	// requests. If zero, SHA-1 will be used.
	Hash _e.Hash
}
